package calculator;
import javax.swing.*;

public class Calcu extends javax.swing.JFrame {

    /*
 * Porject calculator -> source packages -> default packges ->*Calcu.java
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
*
     */
 /*
Planing for java Calculator => There should be a method  which I should call in 
Again and again call in On_Clicks.
On click - > “1”  => 1) on clicking "1" , there should be a check if this is being heppen after pressing any Operator or not, if yes then txt1 should now "1" not concatinating to older txt1 and now it should be become txt2 in other words it shold be second operend now.
    2) 
On click - > “+”  => 1) txtField.getText=temp1, 2) Operator = "+", 3)txtField should ready to get text after pressing "+" key txtField now should show temp1 number let say "21"
    4)txt1=double.,
On click - > “=” => it should show the plus or any operator pressed 's result say txt1+txt2;
On click - > “AC” 
On click - > “C” 
on click - > "."  
from tutorial named " How to create Calculator in java NetBeans Full Tutorial.mp4" 
blow are done work hinted with point number at desired places.
     */
 /*
    As said Above This is Point Number 1
    Create Variables for input and output and Operatorers
    of type Double, 
   Double and String
     */
    double firstnum;
    double secondnum;
    double result;
    String Operations;

    //double thirdnum;
    /**
     * Creates new form Calcu
     */
    public Calcu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jBtn8 = new javax.swing.JButton();
        jBtn7 = new javax.swing.JButton();
        jBtn6 = new javax.swing.JButton();
        jBtn5 = new javax.swing.JButton();
        jBtn4 = new javax.swing.JButton();
        jBtn9 = new javax.swing.JButton();
        jBtnc = new javax.swing.JButton();
        jBtnEqual = new javax.swing.JButton();
        jBtnMultiply = new javax.swing.JButton();
        jBtnDivision = new javax.swing.JButton();
        jBtnDot = new javax.swing.JButton();
        jBtn0 = new javax.swing.JButton();
        jBtnac = new javax.swing.JButton();
        jBtnplsminus = new javax.swing.JButton();
        jBtnplus = new javax.swing.JButton();
        jBtn1 = new javax.swing.JButton();
        jBtn3 = new javax.swing.JButton();
        jBtnSubtract = new javax.swing.JButton();
        jBtn2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField3.setBackground(new java.awt.Color(102, 255, 255));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("0");
        jTextField3.setBorder(new javax.swing.border.MatteBorder(null));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jBtn8.setText("8");
        jBtn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn8ActionPerformed(evt);
            }
        });

        jBtn7.setText("7");
        jBtn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn7ActionPerformed(evt);
            }
        });

        jBtn6.setText("6");
        jBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn6ActionPerformed(evt);
            }
        });

        jBtn5.setText("5");
        jBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn5ActionPerformed(evt);
            }
        });

        jBtn4.setText("4");
        jBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn4ActionPerformed(evt);
            }
        });

        jBtn9.setText("9");
        jBtn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn9ActionPerformed(evt);
            }
        });

        jBtnc.setText("C");
        jBtnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtncActionPerformed(evt);
            }
        });

        jBtnEqual.setText("=");
        jBtnEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEqualActionPerformed(evt);
            }
        });

        jBtnMultiply.setText("*");
        jBtnMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMultiplyActionPerformed(evt);
            }
        });

        jBtnDivision.setText("/");
        jBtnDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDivisionActionPerformed(evt);
            }
        });

        jBtnDot.setText(".");
        jBtnDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDotActionPerformed(evt);
            }
        });

        jBtn0.setText("0");
        jBtn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn0ActionPerformed(evt);
            }
        });

        jBtnac.setText("AC");
        jBtnac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnacActionPerformed(evt);
            }
        });

        jBtnplsminus.setText("+/-");
        jBtnplsminus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnplsminusActionPerformed(evt);
            }
        });

        jBtnplus.setText("+");
        jBtnplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnplusActionPerformed(evt);
            }
        });

        jBtn1.setText("1");
        jBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn1ActionPerformed(evt);
            }
        });

        jBtn3.setText("3");
        jBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn3ActionPerformed(evt);
            }
        });

        jBtnSubtract.setText("-");
        jBtnSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSubtractActionPerformed(evt);
            }
        });

        jBtn2.setText("2");
        jBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jBtn1)
                                                        .addComponent(jBtn4)
                                                        .addComponent(jBtn7)
                                                        .addComponent(jBtnac))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jBtn2)
                                                        .addComponent(jBtn5)
                                                        .addComponent(jBtn8)
                                                        .addComponent(jBtn0))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jBtn3)
                                                        .addComponent(jBtn6)
                                                        .addComponent(jBtn9)
                                                        .addComponent(jBtnc))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jBtnplsminus)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jBtnplus)
                                                                        .addComponent(jBtnMultiply)
                                                                        .addComponent(jBtnDot))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jBtnSubtract)
                                                                        .addComponent(jBtnDivision)
                                                                        .addComponent(jBtnEqual))))))
                                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{jBtn0, jBtn1, jBtn2, jBtn3, jBtn4, jBtn5, jBtn6, jBtn7, jBtn8, jBtn9, jBtnDivision, jBtnDot, jBtnEqual, jBtnMultiply, jBtnSubtract, jBtnac, jBtnc, jBtnplsminus, jBtnplus});

        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jBtn1)
                                        .addComponent(jBtn2)
                                        .addComponent(jBtn3)
                                        .addComponent(jBtnplus)
                                        .addComponent(jBtnSubtract))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jBtn4)
                                        .addComponent(jBtn5)
                                        .addComponent(jBtn6)
                                        .addComponent(jBtnMultiply)
                                        .addComponent(jBtnDivision))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jBtn7)
                                        .addComponent(jBtn8)
                                        .addComponent(jBtn9)
                                        .addComponent(jBtnDot)
                                        .addComponent(jBtnEqual))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jBtnac)
                                        .addComponent(jBtn0)
                                        .addComponent(jBtnc)
                                        .addComponent(jBtnplsminus))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{jBtn0, jBtn1, jBtn2, jBtn3, jBtn4, jBtn5, jBtn6, jBtn7, jBtn8, jBtn9, jBtnDivision, jBtnDot, jBtnEqual, jBtnMultiply, jBtnSubtract, jBtnac, jBtnc, jBtnplsminus, jBtnplus});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 230));

        pack();
    }// </editor-fold>                        

    private void jBtn2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn2.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn2.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }

    }

    private void jBtnSubtractActionPerformed(java.awt.event.ActionEvent evt) {
        firstnum = Double.parseDouble(jTextField3.getText());
        jTextField3.setText("0");
        Operations = "-";
    }

    private void jBtn3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn3.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn3.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn1.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn1.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }                                     

    

    

    

    

    private void jBtnplusActionPerformed(java.awt.event.ActionEvent evt) {
        firstnum = Double.parseDouble(jTextField3.getText());
        jTextField3.setText("0");
        Operations = "+";

    }

    private void jBtnplsminusActionPerformed(java.awt.event.ActionEvent evt) {
        double ops = Double.parseDouble(String.valueOf(jTextField3.getText()));
        ops = ops * (-1);
        jTextField3.setText(String.valueOf(ops));
    }

    private void jBtnacActionPerformed(java.awt.event.ActionEvent evt) {
        jTextField3.setText("0");
        jTextField3.setBackground(Color.white);
        Operations = "";
    }

    private void jBtn0ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn0.getText());
            jTextField3.setBackground(Color.red);
        } else {
            String Enternumber = jBtn0.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtnDotActionPerformed(java.awt.event.ActionEvent evt) {
        String txt = jTextField3.getText();
        if (!txt.contains(".")) {
            jTextField3.setText(jTextField3.getText() + ".");
            jTextField3.setBackground(Color.yellow);
        }
        /*
        if (!"0".equals(jTextField3.getText()) ){
            jTextField3.setText(jTextField3.getText() + jBtnDot.getText());
            jTextField3.setBackground(Color.ORANGE);

            /*
            if(".".contains(jTextField3.getText()))  {
                jTextField3.setText(jTextField3.getText());
                jTextField3.setBackground(Color.CYAN);
            }
         */
 /*
            if (".".equals(jTextField3.getText()) ){
                jTextField3.setText(jTextField3.getText());
                jTextField3.setBackground(Color.DARK_GRAY);
            }
         */
 /*
        }
        else if
        ("0.".equals(jTextField3.getText()) ){
            jTextField3.setText(jTextField3.getText());
            jTextField3.setBackground(Color.magenta);
        }
        else if
        ("1.".equals(jTextField3.getText()) ){
            jTextField3.setText(jTextField3.getText());
            jTextField3.setBackground(Color.pink);
        }   else
        {
            jTextField3.setText(jTextField3.getText());
            jTextField3.setBackground(Color.GREEN);
        }
        /*
        001
        //Filename: CalcGUI
        002
        import java.awt.*;
        003
        import java.awt.event.*;
        004
        import javax.swing.*;
        005
        import javax.swing.event.*;
        006
        import java.awt.event.KeyListener;
        007

        008

        009
        class CalcGUI extends JPanel {
            010

            011

            012
            //=============================================== instance variables
            013
            //--- variable for GUI elements
            014
            private JTextField _displayField;       // display result / input.
            015
            //--- variables representing state of the calculator
            016
            private boolean _startNumber = true;  // true: num key next
            017
            private double      _resultValue = 0.0;  // result so far
            018
            private String   _previousOp  = "=";   // previous operation
            019
            //end instance variables
            020

            021
            //-------------------------------------------- static (class) variables
            022
            private static final Font BIGGER_FONT = new Font("monspaced", Font.PLAIN, 24);
            023

            024

            025
            //====================================================== constructor
            026
            public CalcGUI() {
                027
                //--- Display field
                028
                _displayField = new JTextField("0", 12);
                029
                _displayField.setHorizontalAlignment(JTextField.RIGHT);
                030
                _displayField.setFont(BIGGER_FONT);
                031

                032
                //--- Clear button
                033
                JButton clearButton = new JButton("CLEAR");
                034
                clearButton.setFont(BIGGER_FONT);
                035
                clearButton.addActionListener(
                    036
                    new ActionListener() {
                        037
                        public void actionPerformed(ActionEvent e) {
                            038
                            action_clear();
                            039
                        }
                        040
                    }
                    041
                );
                042

                043
                //--- Use one listener for all numeric keys.
                044
                ActionListener numListener =
                045
                new ActionListener() {
                    046
                    public void actionPerformed(ActionEvent e) {
                        047
                        action_num(e);  // process it below
                        048
                    }
                    049
                };
                050

                051
                //--- Layout numeric keys in a grid.
                052
                //--- Use the characters in a string as a guide
                053
                //--- for producing the numeric keys.
                054
                String buttonOrder = "789456123 0 ";
                055
                JPanel buttonPanel = new JPanel(new GridLayout(5, 3));
                056
                for (int i = 0; i < buttonOrder.length(); i++) {
                    057
                    String keyTop = buttonOrder.substring(i, i+1);
                    058
                    if (keyTop.equals(" ")) {
                        059
                        buttonPanel.add(new JLabel(""));
                        060
                    } else {
                        061
                        JButton b = new JButton(keyTop);
                        062
                        b.addActionListener(numListener);
                        063
                        b.setFont(BIGGER_FONT);
                        064
                        buttonPanel.add(b);
                        065
                    }
                    066
                }
                067

                068
                //--- Create an ActionListener that will be used for
                069
                //--- all of the operator buttons.
                070
                ActionListener opListener =
                071
                new ActionListener() {
                    072
                    public void actionPerformed(ActionEvent e) {
                        073
                        action_op(e);
                        074
                    }//endmethod actionPerformed
                    075
                };
                076

                077

                078
                //--- Create panel with gridlayout to hold operator buttons.
                079
                //--- Use array of button names to create buttons in a loop.
                080
                JPanel opPanel = new JPanel(new GridLayout(5, 1));
                081
                String[] opOrder = {"+", "-", "*", "/", "=","%"};
                082
                for (int i = 0; i < opOrder.length; i++) {
                    083
                    JButton b = new JButton(opOrder[i]);
                    084
                    b.addActionListener(opListener);
                    085
                    b.setFont(BIGGER_FONT);
                    086
                    opPanel.add(b);
                    087
                }

                JButton c= new JButton(".");

                c.setFont(BIGGER_FONT);

                opPanel.add(c);

                // This may be the error but I dont know where to put this, please modify

                //because its not working, I dont really know how to use the KeyListener, I tried to write this code
                093
                // also below but it does not  work, please look at the code i made from here onwards
                094

                095
                /**c.addKeyListener( new KeyListener (){
                    096
                    public void keyPressed( KeyEvent e){
                        097
                        _displayField.setText(".");
                        098
                    }
                    099
                });*/

        //--- Layout this, the top level, panel.

        /*        this.setLayout(new BorderLayout());

                this.add(_displayField, BorderLayout.NORTH );

                this.add(buttonPanel  , BorderLayout.CENTER);
                108
                this.add(opPanel      , BorderLayout.EAST  );
                109
                this.add(clearButton  , BorderLayout.SOUTH );
                110
            }//end constructor
            111

            112

            113
            //============================================================ action_op
            114
            // Called by the action listener for all op buttons.
            115
            private void action_op(ActionEvent e) {
                116
                // The calculator is always in one of two states.
                117
                // 1. A number must be entered next (so this operator is wrong).
                118
                // 2. An operator must be entered next (so we're ok).
                119
                if (_startNumber) { // Error: needed number, not operator
                    120
                    action_clear();
                    121
                    _displayField.setText("ERROR");
                    122
                } else {
                    123
                    _startNumber = true;  // Next thing must be a number
                    124
                    try {
                        125
                        // Get the value from display field, convert it, do prev op
                        126
                        // If this is the first op, _previousOp will be =.
                        127
                        int currentValue = Integer.parseInt(_displayField.getText());
                        128
                        double currentValuez = Double.parseDouble(_displayField.getText());
                        129
                        //int d=Integer.parseInt(c);
                        130

                        131
                        if (_previousOp.equals("=")) {
                            132
                            _resultValue = currentValue;
                            133
                        } else if (_previousOp.equals("+")) {
                            134
                            _resultValue += currentValuez;
                            135
                        } else if (_previousOp.equals("-")) {
                            136
                            _resultValue -= currentValuez;
                            137
                        } else if (_previousOp.equals("*")) {
                            138
                            _resultValue *= currentValuez;
                            139
                        } else if (_previousOp.equals("/")) {
                            140
                            _resultValue /= currentValue;
                            141
                        } else if (_previousOp.equals("%")) {
                            142
                            _resultValue %= currentValue;
                            143
                        }
                        144
                        /**else if(_previousOp.equals("."))
                        145
                        {
                            146
                            c.addKeyListener( new KeyListener(){
                                147
                                public void action(KeyEvent l){
                                    148
                                    _displayField.setText(".");
                                    149
                                }
                                150
                            });*/
 /*
                            151

                            152
                            /**c.addKeyListener( new KeyListener (){
                                153
                                public void keyTyped( KeyEvent e){
                                    154
                                    _displayField.setText(".");
                                    155
                                }
                                156
                            });*/
 /*
                            157

                            158

                            159
                            /**} else if (_previousOp.equals(".")) {
                            160
                            _displayField.setText(currentValue+"."+currentValue);
                            161
                        }*/
 /*
                        162
                        _displayField.setText(""+_resultValue);
                        163

                        164
                    } catch (NumberFormatException ex) {
                        165
                        action_clear();
                        166
                        _displayField.setText("Error");
                        167
                    }
                    168

                    169
                    //--- set _previousOp for the next operator.
                    170
                    _previousOp = e.getActionCommand();
                    171
                }//endif _startNumber
                172
            }//endmethod action_op
            173

            174

            175
            //======================================================== action_num
            176
            // Called by the action listener for numeric keys
            177
            private void action_num(ActionEvent e) {
                178
                String digit = e.getActionCommand(); // gets text from digit key
                179
                if (_startNumber) {
                    180
                    // This is the first digit, clear field and set
                    181
                    _displayField.setText(digit);
                    182
                    _startNumber = false;
                    183
                } else {
                    184
                    // Add this digit to the end of the display field
                    185
                    _displayField.setText(_displayField.getText() + digit);
                    186
                }
                187
            }//endmethod action_num
            188

            189

            190
            //=============================================== logic action_clear
            191
            // Called by the action listener for the Clear button
            192
            public void action_clear() {
                193
                _startNumber = true;
                194
                _displayField.setText("0");
                195
                _resultValue = 0.0;
                196
                _previousOp  = "=";
                197

                198

                199

                200

                201
            }//endmethod action_clear
            202

            203

            204
            /**c.addActionListener( new ActionListener (){
                205
                public void actionPerformed( ActionEvent e){
                    206
                    _displayField.setText(".");
                    207
                }
                208
            });*/
 /*
            209

            210
        }//endclass  CalcGUI

         */
        //  */
        //  /*
        /*
        if (!txt_Result.Text.Contains("."))
        if(txt_Result.Text == string.Empty)
        txt_Result.Text = "0.";
        else
        txt_Result.Text += ".";
        else
        MessageBox.Show("more dots are not allowd");

         */
 /*
        if(!".".contains(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText()+ ".");
            jTextField3.setBackground(Color.MAGENTA);
            if(".".contains(jTextField3.getText())) {
                jTextField3.setText(jTextField3.getText());
                jTextField3.setBackground(Color.blue);
            }
        } else
        {
            jTextField3.setText(jTextField3.getText());
            jTextField3.setBackground(Color.GREEN);
        }

         */
        // */
        /*
        String test = x.getText();
        if(test.startsWith(" ")){buttonN.setForeground(Color.GRAY));}
        else{buttonN.setForeground(Color.BLACK));}
        String test = x.getText();
        if (test.startsWith (" "))
        {
            buttonN.setForeground (Color.GRAY);
        }
        else buttonN.setForeground (Color.BLACK);
        if(x.getText().trim().length() == 0){
            buttonN.setForeground(Color.GRAY);
        }else{
            buttonN.setForeground(Color.BLACK);
        }
        If you want to do real-time validation of a text component, your best choice is to use a `DocumentFilter.
        See Text Component Features, in particular Implementing a Document Filter for more details and these examples
        Do not use a KeyListener on text components, these can cause mutation exceptions as you fight with the fields Document. There is also no guarantee in the order events will be raised, meaning that it's possible for the keystroke to be consumed before it reaches your listener.
        Instead of getting the count of "." each and every time, here is a efficient way of doing this
        textField.addKeyListener(new KeyListener() {
            int i=0;
            public void keyTyped(KeyEvent e) {
                if(e.getKeyChar()=='.'){
                    if(i==1)
                    e.consume();
                    else
                    i=1;
                }
            }
            public void keyPressed(KeyEvent keyEvent) {}
            public void keyReleased(KeyEvent keyEvent) {}
        });
        Do not use a KeyListener on text components, these can cause mutation exceptions as you fight with the fields Document. There is also no guarantee in the order events will be raised, meaning that it's possible for the keystroke to be consumed before it reaches your listener or the keystroke could already have been applied to the fields document, making it redundant. – MadProgrammer Mar 13 '14 at 23:04
         */
        //if (!".".equals(jTextField3.getText()) ){
        // if(!jTextField3.Text.Contains("."))
        // if(!.jTextField3.getText().contains("."))
        // if (".".contains(jTextField3.getText()))
        // for checking if decimeal point is before more then two digits.
        // if(inputTxtField.getText().indexOf(".") >= 0 && inputTxtField.getText().indexOf(".") < inputTxtField.getText().length() - 2){
        /*
                If you want to -> make sure it's a number AND has only one decimal <- try this RegEx instead:
                if(mystring.matches("^[0-9]*\\.?[0-9]*$")) {
                    // Do something
                }
                else {
                    // Do something else
                }
                This RegEx states:
                The ^ means the string must start with this.
                Followed by none or more digits (The * does this).
                Optionally have a single decimal (The ? does this).
                Follow by none or more digits (The * does this).
                And the $ means it must end with this.
                Note that bullet point #2 is to catch someone entering ".02" for example.
                If that is not valid make the RegEx: "^[0-9]+\\.?[0-9]*$"
                Only difference is a + sign. This will force the decimal to be preceded with a digit: 0.02
         */
 /*
                String txt = jTextField3.getText();
                if(!".".contains(txt))
                {
                    jTextField3.setText(txt + ".");
                    jTextField3.setBackground(Color.MAGENTA);
                    ///*
                    if(".".contains(txt))
                    {
                        jTextField3.setText(txt);
                        jTextField3.setBackground(Color.yellow);
                    }
                    //*/
 /*
                }
                else
                {
                    jTextField3.setText(txt);
                    jTextField3.setBackground(Color.GREEN);
                }
                /*  String Enternumber = jTextField3.getText() + jBtnDot.getText();
                jTextField3.setText(Enternumber);
         */
 /*
                int age = 68;
                if (age < 13)
                {
                    System.out.println("You are but a wee child!");
                }
                else if (age < 19)
                {
                    System.out.println("You are no longer a child, but a budding teenager.");
                }
                else
                {
                    if (age < 65)
                    {
                        System.out.println("You are an adult!");
                    }
                    else
                    {
                        System.out.println("You are now a senior, enjoy the good life friends!");
                    }
                    System.out.println("Also, since you are over the age of 19, you deserve a drink!");
                }
                [0-9]+(\.[0-9][0-9]?)?
         */
 /*
                if (txt.matches("^[0-9]+\\.?[0-9]*$")) {
                    // txt += ".";
                    //  txt =txt+2;
                }
                else {
                    //txt += ".";
                    // txt =txt+1;
         */
 /*
                    The ^ means the string must start with this.
                    Followed by none or more digits (The * does this).
                    Optionally have a single decimal (The ? does this).
                    Follow by none or more digits (The * does this).
                    And the $ means it must end with this.
                    Note that bullet point #2 is to catch someone entering ".02" for example.
                    If that is not valid make the RegEx: "^[0-9]+\\.?[0-9]*$"
                    Only difference is a + sign. This will force the decimal to be preceded with a digit: 0.02
         */
    }

    private void jBtnDivisionActionPerformed(java.awt.event.ActionEvent evt) {
        firstnum = Double.parseDouble(jTextField3.getText());
        jTextField3.setText("0");
        Operations = "/";
    }

    private void jBtnMultiplyActionPerformed(java.awt.event.ActionEvent evt) {
        firstnum = Double.parseDouble(jTextField3.getText());
        jTextField3.setText("0");
        Operations = "*";
    }

    private void jBtnEqualActionPerformed(java.awt.event.ActionEvent evt) {
        String answer;
        /*
        Thank Allah i have completed my Calculator,  Here my Next Task is
        when i press "+" btn and again input digits,
        after that if i again press "+" but then my
        fistnum+thirnum(the number which i entered after pressing "+" btn
            should be added and again txt.display should be "+" and
            ready for new input and so on............
         */
        secondnum = Double.parseDouble(jTextField3.getText());
        if (Operations == "+") {
            result = firstnum + secondnum;
            answer = String.format("%.0f", result);
            jTextField3.setText(answer);
        } else if (Operations == "-") {
            result = firstnum - secondnum;
            answer = String.format("%.0f", result);
            jTextField3.setText(answer);
        } else if (Operations == "*") {
            result = firstnum * secondnum;
            answer = String.format("%.0f", result);
            jTextField3.setText(answer);
        } else if (Operations == "/") {
            result = firstnum / secondnum;
            answer = String.format("%.0f", result);
            jTextField3.setText(answer);
        }
    }

    private void jBtncActionPerformed(java.awt.event.ActionEvent evt) {
        jTextField3.setText("0");
        jTextField3.setBackground(Color.lightGray);
        Operations = "";

    }

    private void jBtn9ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn9.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn9.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn4ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn4.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn4.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn5ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn5.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn5.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn6ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn6.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn6.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn7ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn7.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn7.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jBtn8ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!"0".equals(jTextField3.getText())) {
            jTextField3.setText(jTextField3.getText() + jBtn8.getText());
            jTextField3.setBackground(Color.red);
        } else {

            String Enternumber = jBtn8.getText();
            jTextField3.setText(Enternumber);
            jTextField3.setBackground(Color.blue);
        }
    }

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calcu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calcu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calcu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calcu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calcu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jBtn0;
    private javax.swing.JButton jBtn1;
    private javax.swing.JButton jBtn2;
    private javax.swing.JButton jBtn3;
    private javax.swing.JButton jBtn4;
    private javax.swing.JButton jBtn5;
    private javax.swing.JButton jBtn6;
    private javax.swing.JButton jBtn7;
    private javax.swing.JButton jBtn8;
    private javax.swing.JButton jBtn9;
    private javax.swing.JButton jBtnDivision;
    private javax.swing.JButton jBtnDot;
    private javax.swing.JButton jBtnEqual;
    private javax.swing.JButton jBtnMultiply;
    private javax.swing.JButton jBtnSubtract;
    private javax.swing.JButton jBtnac;
    private javax.swing.JButton jBtnc;
    private javax.swing.JButton jBtnplsminus;
    private javax.swing.JButton jBtnplus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   
}
